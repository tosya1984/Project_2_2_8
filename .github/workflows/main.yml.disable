name: Deploy to Amazon ECR

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

      - name: Declare version off images
        run: |
          # declare version majar
          verMaj=1
          # declare version minor
          verMin=$(git rev-list --count HEAD)
          # declare full version
          echo "version=$verMaj.$verMin" >> $GITHUB_ENV
          
      - name: Build Docker image
        run: |
          docker build -t frontend:ver.${{ env.version }} ./code\ for\ diagram\ 1/frontend
          docker build -t backend_rds:ver.${{ env.version }} ./code\ for\ diagram\ 1/backend_rds
          docker build -t backend_redis:ver.${{ env.version }} ./code\ for\ diagram\ 1/backend_redis
          docker images

          
      - name: Tag Docker image
        run: |

          docker tag frontend:ver.${{ env.version }} ${{ secrets.ECR_REPOSITORY_URI }}frontend:ver.${{ env.version }}
          docker tag backend_rds:ver.${{ env.version }} ${{ secrets.ECR_REPOSITORY_URI }}backend_rds:ver.${{ env.version }}
          docker tag backend_redis:ver.${{ env.version }} ${{ secrets.ECR_REPOSITORY_URI }}backend_redis:ver.${{ env.version }}

      - name: Push Docker image to Amazon ECR
        run: |
          # ver=$(git rev-list --count HEAD)
          docker push ${{ secrets.ECR_REPOSITORY_URI }}frontend:ver.${{ env.version }}
          docker push ${{ secrets.ECR_REPOSITORY_URI }}backend_rds:ver.${{ env.version }}
          docker push ${{ secrets.ECR_REPOSITORY_URI }}backend_redis:ver.${{ env.version }}

      - name: Update ECS Service to Force New Deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          my-task: "3containers-private-secondVPC:2"
          cluster: "fargate-test"
          service: "servise-of-free-containers"
        run: |
          # Завантажити оригінальний Task Definition
          aws ecs describe-task-definition \
            --task-definition ${{ env.my-task }} \
            --region ${{ secrets.AWS_REGION }} > task-def.json

          # Оновити image в контейнері за допомогою yq
          cat task-def.json

          yq e '.taskDefinition |
            .containerDefinitions[0].image = "${{ secrets.ECR_REPOSITORY_URI }}frontend:ver.${{ env.version }}" |
            .containerDefinitions[1].image = "${{ secrets.ECR_REPOSITORY_URI }}backend_rds:ver.${{ env.version }}" |
            .containerDefinitions[2].image = "${{ secrets.ECR_REPOSITORY_URI }}backend_redis:ver.${{ env.version }}" |
            del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            task-def.json > updated-task-def.json

            #             .family = "3containers-private-secondVPC" |
          
          # yq e '.taskDefinition.containerDefinitions[0].image = "${{ secrets.ECR_REPOSITORY_URI }}frontend:ver.${{ env.version }}" |
          #       .taskDefinition.containerDefinitions[1].image = "${{ secrets.ECR_REPOSITORY_URI }}backend_rds:ver.${{ env.version }}" |
          #       .taskDefinition.containerDefinitions[2].image = "${{ secrets.ECR_REPOSITORY_URI }}backend_redis:ver.${{ env.version }}" |
          #       .taskDefinition' task-def.json > updated-task-def.json   
          
          # Вивести оновлений Task Definition
          cat updated-task-def.json

          # Debug variables
          echo "2 step lasts"
          pwd
          # ls -la

          # Register New Task Definition
          aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json
           
            # --family ${{ env.my-task }} \

    
          echo "last step"
              
          # Оновити сервіс
          aws ecs update-service \
            --cluster ${{ env.cluster }} \
            --service ${{ env.service }} \
            --task-definition ${{ env.my-task }} \
            --region ${{ secrets.AWS_REGION }} \
            --force-new-deployment
            
